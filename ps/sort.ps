%%%%%%%%%%%%%%%%%%%%%
% Tanner Kvarfordt  %
% A02052217         %
% CS4700            %
% Homework 1        %
%%%%%%%%%%%%%%%%%%%%%

% Useful 'roll' explanation: 
% https://stackoverflow.com/questions/15997536/how-do-you-keep-the-roll-operator-straight#15997537

% function to duplicate entire stack
/dup_stack {
    1 dict begin

    /n count 1 sub 1 sub def

    count {
        n index
    } repeat

    end
} def

% function that calculates the maximum of the top two numbers on the stack
% and pushes that max onto the stack
/max {
    1 dict begin

    /y exch def
    /x exch def

    x y gt
        {x}
        {y}
    ifelse
    end
} def

% param: number of times to call max 
% calls min @param times
/find_largest {

    % last item on the stack should be number of times to repeat
    { max } repeat

} def

% param: largest number in the stack
% given the largest number present in the stack, searches the stack and removes that number
/rm_largest {
    1 dict begin

    /largest exch def
    /x exch def

    largest x eq
        {
             % if we found and removed the largest during the comparison, do nothing, we're done
        }

        {
            % if we didn't find the largest...
            x % push the last compared item back onto the stack
            count 1 roll % roll the top of the stack to the bottom for next compare
            largest % push largest back onto the stack
            rm_largest % recurse
        }
    ifelse

    end
} def

/sort {
    1 dict begin % set up local dictionary

    count 0 eq {} {
    count 1 eq
        {}
        {

            /stack_size count 1 sub def % size of the stack to be sorted

            dup_stack % duplicate the entire stack

            stack_size 1 sub find_largest % iterate through duplicated stack to find the largest number present
                                           % leaves the largest number on the stack

            /largest exch def

            largest % push largest back onto the stack for rm_largest

            rm_largest

            sort % recurse

            largest % push largest back onto the stack
        } ifelse
    } ifelse

    end % remove local dictionary
} def


